# Generated by Django 5.1.3 on 2025-01-12 15:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Product Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('color', models.CharField(max_length=100, verbose_name='Color')),
                ('discount', models.PositiveSmallIntegerField(default=0, help_text='discount %', verbose_name='Discount')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hexashop_app.category', verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email')),
                ('phone', models.CharField(error_messages={'unique': 'This phone number is already registered'}, max_length=13, unique=True, verbose_name='Phone Number')),
                ('password', models.CharField(max_length=8, verbose_name='Password')),
                ('password_repeat', models.CharField(max_length=8, verbose_name='Repeat Password')),
                ('groups', models.ManyToManyField(blank=True, related_name='hexashop_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='hexashop_user_permissions', to='auth.permission')),
                ('wish_list', models.ManyToManyField(blank=True, related_name='users_wish_list', to='hexashop_app.product', verbose_name='Wish List')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
